name: backend-ci-cd

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    if: github.repository == 'songyeongeun/capstoneDesign_HEJZ'
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: yeongeunsong/ustar-back
      TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle build
        working-directory: HEJZ_back
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push image
        run: |
          docker build -t $IMAGE_NAME:${{ env.TAG }} -t $IMAGE_NAME:latest HEJZ_back
          docker push $IMAGE_NAME:${{ env.TAG }}
          docker push $IMAGE_NAME:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy via AWS SSM Run Command
        run: |
          set -e
          CMD_ID=$(aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --comment "ustar deploy ${{ github.sha }}" \
            --parameters commands="cd /srv/ustar && export TAG=${{ env.TAG }} && docker compose pull && docker compose up -d && docker image prune -f" \
            --query "Command.CommandId" --output text)

          aws ssm wait command-executed --command-id "$CMD_ID" --instance-id ${{ secrets.EC2_INSTANCE_ID }}

          aws ssm get-command-invocation \
            --command-id "$CMD_ID" \
            --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
            --query '{Status:Status, StdOut:StandardOutputContent, StdErr:StandardErrorContent}'
